Git Commands:

git log => shows the log for git
git checkout => used to revert to a previous version; switch between branches
git diff id1 id2 => tells the difference between two commit id's
git clone => to copy a repository

================================================================================================================================================
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros:

more logical commits.
better versions that make more sense.

Cons:

chances of losing work
manual saving i.e. remembering to save a change everytime

=================================================================================================================================================

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

In a real time scenario there are many files that are interelated to each other eg. a HTML and a CSS file. In these type of scenarios it is more logical for us to track these files together as they are interdependant and either one would have been responsible for the bug being faced currently,if any. In git this problem is solved by the concept of repositories where all the interelated files are kept in a single repository and the changes are reflected for all the files simultaneously.
=================================================================================================================================================

How can you use the commands git log and git diff to view the history of files?

git log : shows the various versions with their version id's.
git diff : show the difference between the two commits. syntax: git diff first_commit_id second_commit_id

=================================================================================================================================================

Git Errors and Warnings Solution

Should not be doing an octopus 
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state 
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

Panic! (the 'impossible' happened) 
This is a real error message, but it’s not output by Git. Instead it’s output by GHC, the compiler for a programming language called Haskell. It’s reserved for particularly surprising errors!

Takeaway

We hope these errors and warnings amused you as much as they amused us! Now that you know what kind of errors Git can throw, you’re ready to start checking out previous versions of files with Caroline.

================================================================================================

How might using version control make you more confident to make changes that could break something?

It is like playing a video game with infinite lives.

The major advantage of git lies here that we can easily experiment with new features.
This allows the freedom to innovate and on the same hand can help to restore a production environment to a bug free environment without any downtime.

Additionally using git diff we can easily identify as well what might have caused the issue.
Example: git diff id_withoutbuglast id_withbugfirst


================================================================================================

Now that you have your workspace set up, what do you want to try using Git for?

I plan to use git for the web development projects that I intend to work on.

================================================================================================

Setting up your workspace:

Changing background color

If you prefer the background color of Git Bash to be something other than black, you can change it in the "Defaults" menu under the "Colors" tab. If you like the background color as-is, you don't need to make any changes.

Downloading necessary files

Save this file (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash) in your home directory with the name git-completion.bash.
Save this file (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh) in your home directory with the name git-prompt.sh.
Save bash_profile_course from the Downloadables section in your home directory with the name .bash_profile. (If you're curious to learn more about how bash prompts work, see this page.)

Making Git configurations

Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from Git Bash.

git config --global core.editor "'C:/Program Files/Sublime Text2/sublime_text.exe' -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3
Make sure you can start your editor from Git Bash

If you use Sublime, you can do this by adding the following line to your .bash_profile:

?????????alias subl="C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe"
Restart Git Bash??????????????

You'll need to close and re-open Git Bash before all your changes take effect

================================================================================================================